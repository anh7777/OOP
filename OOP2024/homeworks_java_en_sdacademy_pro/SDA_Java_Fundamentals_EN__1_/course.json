{
  "summary" : "Exercises Java from scratch",
  "title" : "SDA Java EN",
  "authors" : [
    "SDA"
  ],
  "programming_language" : "JAVA",
  "language" : "en",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "Java Fundamentals",
      "items" : [
        {
          "title" : "Introduction",
          "task_list" : [
            {
              "name" : "Hello world",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Run me!\");\n    }\n}\n"
                }
              },
              "description_text" : "## Introduction to IntelliJ EduTools\n\nIntelliJ EduTools is a great tool that is ideal for learning programming in ** Java ** in the form of homework.\n\nThe repository you have downloaded refers to a specific module in the course you are a student. It is worth noting that this repository has been divided into lessons, where each lesson has one or several tasks.\n\nTasks can be divided into several categories:\n* ** Theoretical ** - present and discuss theoretical issues. In this type of tasks you do not write code but learn or repeat various issues. It may happen that you will be presented with a ready program. To see its effects, click the `Run` button.\n\n* ** Verification ** - verify your theoretical knowledge using simple tests.\n\n* ** Practical ** - require a solution to the task presented. They can provide some already written code and require you to complete the program to achieve the expected result. They can also expect to write the entire program from scratch. Your solutions are always verified for correctness and the task is passed only if the program behaves as it was presented in the requirements of the task. You can also preview the solution. After all, try to solve the problems yourself and do not use this option.\n\n\nTo check if the solution of the task or answer in the test is correct, click on the `Check` button. If all went well, you can go to the next task by clicking the `Next` button.\n\n---\n\nGo to the sample task by clicking the `Next` button below.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "Hello world",
                  "status" : "CORRECT"
                },
                {
                  "text" : "Aloha!",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Hallo Welt!",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Dzie≈Ñ dobry",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "First quiz",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "The first program every programmer writes is called:",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "name" : "First task",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 73,
                      "length" : 49,
                      "possible_answer" : "System.out.println(\"Hello world\");",
                      "placeholder_text" : "// Write here: System.out.println(\"Hello world\");"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "public class Task {\n    public static void main(String[] args) {\n        // Write here: System.out.println(\"Hello world\");\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        Task.main(new String[]{});\n\n        assertEquals(\"Display on screen text \\\"Hello world\\\"\", \"Hello world\", outContent.toString().trim());\n    }\n\n}\n"
                }
              },
              "description_text" : "## Hello World\n\nAll outstanding programmers began their programming adventure by writing the program \"Hello world\".\n\nThe goal of the program is to display the text `Hello world` and then exit. It is the simplest possible program that can be written in any programming language.\n\nIn Java, the `System.out.println` command is used to display text on the screen. Enter the text to be displayed on the screen in brackets.\n\nText in Java should always be given in quotation marks (`\"\"`), e.g. `\"Some text\"` or `\"Anything\"`.\n\nSaving the following program:\n\n```java\npublic class Task {\n    public static void main (String [] args) {\n        System.out.println(\"Some text\");\n    }\n}\n```\n\nand running with the `Run` command (green triangle in the upper right corner) will display the following result:\n\n```text\nSome text\n```\n\n---\n\nArmed with this knowledge, write your first program that will print the text `\"Hello world\"` on the screen. Run it to check if it works properly. When you are sure it is ok, press the `Check` button below.\n\nIf the program works correctly, press the `Next` button to go to the appropriate section for the given course module.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "title" : "Quiz",
          "task_list" : [
            {
              "choiceOptions" : [
                {
                  "text" : "print(\"Hello World\");",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "System.out.println(\"Hello World\");",
                  "status" : "CORRECT"
                },
                {
                  "text" : "Console.WriteLine(\"Hello World\");",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "echo(\"Hello World\");",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question01",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "How to write \"Hello World\" in Java in console?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "// comment",
                  "status" : "CORRECT"
                },
                {
                  "text" : "/* comment",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "# comment",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "!-- comment",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question02",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "How to insert a comment in code in Java?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "myString",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "string",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Txt",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "String",
                  "status" : "CORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question03",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Which data type is used to store text in Java?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "x = 5;",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "float x = 5;",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "int x = 5;",
                  "status" : "CORRECT"
                },
                {
                  "text" : "num x = 5;",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question04",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "How do you create an integer value of 5 in Java?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "byte x = 2.8f;",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "float x = 2.8f;",
                  "status" : "CORRECT"
                },
                {
                  "text" : "int x = 2.8f;",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "x = 2.8f;",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question05",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "How do you create a 2.8 floating point variable in Java?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "getLenght()",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "len()",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "getSize()",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "legnth()",
                  "status" : "CORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question06",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Which method is used to check the length of text in the class `String`?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "true",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "false",
                  "status" : "CORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question07",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "String value can be placed between single quotation marks:",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "upperCase()",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "toUpperLetters()",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "upperLetters()",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "toUpperCase()",
                  "status" : "CORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question08",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Which method is used to convert letters in text to uppercase?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "[]{}",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "()",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "[]",
                  "status" : "CORRECT"
                },
                {
                  "text" : "{}",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question09",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "To declare an array in Java, add to the variable type:",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "MyClass myObj = new MyClass();",
                  "status" : "CORRECT"
                },
                {
                  "text" : "class MyClass = new MyObj();",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "new myObj = MyClass();",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "class myObj = new MyClass();",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question10",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "How do you create an object called myObj of type MyClass?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "get",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "break",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "void",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "return",
                  "status" : "CORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question11",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Which keyword is used to return a value?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "stop",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "return",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "break",
                  "status" : "CORRECT"
                },
                {
                  "text" : "exit",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question12",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Which keyword is used to break the loop?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "String text = ‚ÄòIncorrect value‚Äô;",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "double price = 103,12;",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "long number = 1_000_000;",
                  "status" : "CORRECT"
                },
                {
                  "text" : "char out = ‚Äúx‚Äù;",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "char description = ‚ÄòA camera‚Äô;",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question13",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Which of the following variables is initialized correctly?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "int x = (int)(55395.5);",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "float x = (float)(1233944.55);",
                  "status" : "CORRECT"
                },
                {
                  "text" : "short x = (short)(33243);",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "byte x = (byte)(255);",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question14",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Which of the following casts does not cause information loss?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "To define the set of startup parameters entered by the user when starting the program from the command line.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "To define a function that is able to call itself.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "To define the set of possible values. These values can be modified while the program is running.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "To define the set of possible values. These values cannot be modified while the program is running.",
                  "status" : "CORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question15",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "What does enum do in Java?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "2, 4 and 8",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "4 and 5",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "2",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "2 and 8",
                  "status" : "CORRECT"
                },
                {
                  "text" : "4 and 8",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "8",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "All the answers are correct.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "No answer is correct.",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question16",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "In which lines of code is the word static used correctly?\n\n```java\npublic class A {\n    static int x = 5;\n\n    public static A() {\n        static int y = 8;\n    }\n    \n    public static void B() {\n        int z = 11;\n    }\n}\n```",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "Replace System.out.println with System.out.printf in line 4.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Delete the word static from line 2.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Replace i ++ with ++ and on line 3.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Put line 4 in braces.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Replace System.out.println with System.out.print in line 4.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Add int before i = 0 on line 3.",
                  "status" : "CORRECT"
                },
                {
                  "text" : "Add a semicolon at the end of line 3.",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question17",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "What should be improved in the program below to make the code compile?\n```java\npublic class A {\n    public static void main(String... args) {\n        for (i = 0; i < 5; i++) {\n            System.out.println(\"Hey!\");\n        }\n    }\n}\n```\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "X5",
                  "status" : "CORRECT"
                },
                {
                  "text" : "5",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Compilation Error.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "X2",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "2",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Runtime Error.",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question18",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "What will be the result of the following program?\n\n```java\npublic class A {\n    public static void main(String[] args) {\n        int a = 5;\n        if (a - 3 > 0) {\n            System.out.println(\"X\");\n        }\n        System.out.println(a);\n    }\n}\n```",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "short",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "double",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "int",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "string",
                  "status" : "CORRECT"
                },
                {
                  "text" : "char",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "boolean",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question19",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "Which of the following simple types is incorrect?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "Runtime Error.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "2020-04-01",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "2020-03-31",
                  "status" : "CORRECT"
                },
                {
                  "text" : "2020-03-32",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question20",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "What will be the result of the following program?\n```java\nimport java.time.LocalDate;\n\npublic class A {\n    public static void main(String[] args) {\n        LocalDate d = LocalDate.of(2020, 3, 31);\n        d.plusDays(1);\n        System.out.println(d);\n    }\n}\n```",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "Runtime Error.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "11125",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "675",
                  "status" : "CORRECT"
                },
                {
                  "text" : "111213",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Compilation Error.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "678",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question21",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "What will be the result of the following program?\n```java\npublic class A {\n    private static int a;\n\n    public static void main(String[] args) {\n        int a = 5;\n        System.out.println(f(a));\n        System.out.println(f(a));\n        System.out.println(a);\n    }\n\n    public static int f(int x) {\n        a++;\n        return a + x;\n    }  \n}\n```",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "Primitive.",
                  "status" : "CORRECT"
                },
                {
                  "text" : "Enums.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Collections.",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Objects.",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question22",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "What types of data do the packaging classes contain?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "1 byte",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "2 bytes",
                  "status" : "CORRECT"
                },
                {
                  "text" : "4 bytes",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "8 bytes",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question23",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "What size in bytes is the variable type `char`?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            },
            {
              "choiceOptions" : [
                {
                  "text" : "double",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "short",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "int",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "long",
                  "status" : "CORRECT"
                },
                {
                  "text" : "float",
                  "status" : "INCORRECT"
                },
                {
                  "text" : "Integer",
                  "status" : "INCORRECT"
                }
              ],
              "isMultipleChoice" : false,
              "name" : "question24",
              "files" : {
                "src/Main.java" : {
                  "name" : "src/Main.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Main {\n    public static void main(String[] args) {\n\n    }\n}"
                }
              },
              "description_text" : "What type of variable is the best to store the result of `1000 * 2500000`?",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "choice"
            }
          ],
          "type" : "lesson"
        },
        {
          "title" : "Tasks",
          "task_list" : [
            {
              "name" : "task01",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 100,
                      "length" : 31,
                      "possible_answer" : "Scanner scanner = new Scanner(System.in);\n\n        int height = scanner.nextInt();\n        float weight = scanner.nextFloat();\n\n        if (height <= 150 || weight > 180.0f) {\n            System.out.println(\"I'm sorry you can't go!\");\n        } else {\n            System.out.println(\"Fasten your seatbelt!\");\n        }",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        // Implement your solution here\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\nimport java.util.Locale;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    private static final Locale LOCALE = new Locale(\"en-US\");\n    private Locale systemLocale;\n\n    @Before\n    public void setUpStreams() {\n        systemLocale = Locale.getDefault();\n        Locale.setDefault(LOCALE);\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        Locale.setDefault(systemLocale);\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"185\\n70.0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"A person who is 185cm tall and weighs 70kg can ride.\", \"Fasten your seatbelt!\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"150\\n70.1\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"A person who is 150cm tall and weighs 70.1kg cannot ride.\", \"I'm sorry you can't go!\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"185\\n180\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"A person who is 185cm tall and weighs 180kg can ride.\", \"Fasten your seatbelt!\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution4() {\n        String inputText = \"185\\n181.0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"A person who is 185cm tall and weighs 181kg cannot ride.\", \"I'm sorry you can't go!\", outContent.toString().trim());\n    }\n\n}"
                }
              },
              "description_text" : "Write a program that, based on the variables: height - `height (int)` and weight - `weight (float)`, checks whether a person can ride a roller coaster.\n\nIf a person is taller than 150cm and does not exceed 180kg, the program will write in the console `\"Fasten your seatbelt!\"`, Otherwise it will write in the console `\"I'm sorry you can't go!\"`.\n\nGet the data from the user in the console using the `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task02",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 100,
                      "length" : 31,
                      "possible_answer" : "Scanner scanner = new Scanner(System.in);\n\n        float tempInCelsius = scanner.nextFloat();\n\n        System.out.println(1.8f * tempInCelsius + 32.0f);",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        // Implement your solution here\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\nimport java.util.Locale;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    private static final Locale LOCALE = new Locale(\"en-US\");\n    private Locale systemLocale;\n\n    @Before\n    public void setUpStreams() {\n        systemLocale = Locale.getDefault();\n        Locale.setDefault(LOCALE);\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        Locale.setDefault(systemLocale);\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"32.0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"32 degrees Celsius is 89.6 degrees Fahrenheit.\", 89.6, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"62.0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"62 degrees Celsius is 143.6 degrees Fahrenheit.\", 143.6, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"-22.0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"-22 degrees Celsius is -7.6 degrees Fahrenheit.\", -7.6, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution4() {\n        String inputText = \"0.0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"0 degrees Celsius is 32 degrees Fahrenheit.\", 32.0, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n}"
                }
              },
              "description_text" : "Write a program that based on the variable temperature in degrees Celsius - `tempInCelsius (float)`, will calculate the temperature in degrees Farhenheit (degrees Fahrenheit = 1.8 * degrees Celsius + 32.0) and write it in the console.\n\nGet the temperature from the user in the console using the `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task03",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 100,
                      "length" : 31,
                      "possible_answer" : "Scanner scanner = new Scanner(System.in);\n\n        double income = scanner.nextDouble();\n\n        if (income <= 85528.0) {\n            double calculatedTax = income * 0.18 - 556.02;\n\n            if (calculatedTax < 0) {\n                calculatedTax = 0;\n            }\n\n            System.out.println(calculatedTax);\n        } else {\n            System.out.println(14839.02 + 0.32 * (income - 85528.0));\n        }",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        // Implement your solution here\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\nimport java.util.Locale;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    private static final Locale LOCALE = new Locale(\"en-US\");\n    private Locale systemLocale;\n\n    @Before\n    public void setUpStreams() {\n        systemLocale = Locale.getDefault();\n        Locale.setDefault(LOCALE);\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        Locale.setDefault(systemLocale);\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"5400.0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"The tax on 5,400 is 415.98.\", 415.98, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"543200.54\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"The tax on 543,200.54 is 161294.23.\", 161294.23, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"The tax on 0 is 0.\", 0, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution4() {\n        String inputText = \"320.0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"The tax on 320 is 0.\", 0.0, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n}"
                }
              },
              "description_text" : "Write a program that, based on the variable: `income (double)`, will calculate the amount of personal income tax due and write it to the console.\n\nThe tax is calculated according to the following rules:\n* up to 85,528.00 tax is 18% of the base minus 556.02,\n* from 85,528.00 tax is 14,839.02 + 32% of the surplus over 85,528.00.\n\nGet the income from the user in the console using the `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task04",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 101,
                      "length" : 31,
                      "possible_answer" : "Scanner scanner = new Scanner(System.in);\n\n        double amount = scanner.nextDouble();\n        int numberOfInstallments = scanner.nextInt();\n\n        if (amount < 100.0 || amount > 10000.0) {\n            amount = 5000;\n        }\n\n        if (numberOfInstallments < 6 || numberOfInstallments > 48) {\n            numberOfInstallments = 36;\n        }\n\n        double loanInterest;\n        if (numberOfInstallments <= 12) {\n            loanInterest = 0.025;\n        } else if (numberOfInstallments <= 24) {\n            loanInterest = 0.05;\n        } else {\n            loanInterest = 0.1;\n        }\n\n        System.out.println(amount * (1.0 + loanInterest) / numberOfInstallments);",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n\n    public static void main(String[] args) {\n        // Implement your solution here\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\nimport java.util.Locale;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    private static final Locale LOCALE = new Locale(\"en-US\");\n    private Locale systemLocale;\n\n    @Before\n    public void setUpStreams() {\n        systemLocale = Locale.getDefault();\n        Locale.setDefault(LOCALE);\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        Locale.setDefault(systemLocale);\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"10.0\\n10\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"The installment on 10.00 for 10 months is 512.50 because the amount has been increased to 5,000.00.\", 512.5, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"100000\\n10\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"The installment on 10,000.00 for 10 months is 512.50 because the amount has been reduced to 5,000.00.\", 512.5, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"1000\\n50\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"The installment on 1,000.00 for 50 months is 30.56 because the number of installments has been reduced to 36.\", 30.56, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution4() {\n        String inputText = \"1000\\n2\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"The installment on 1,000.00 for 2 months is 30.56 because the number of installments has been increased to 36.\", 30.56, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n    @Test\n    public void testSolution5() {\n        String inputText = \"7500.50\\n36\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"The installment on 7,500.50 for 36 months is 229.18.\", 229.18, Double.parseDouble(outContent.toString().trim()), 0.1);\n    }\n\n}"
                }
              },
              "description_text" : "Write a program which, based on the variables: amount - `amount (double)` and number of installments - `numberOfInstallments (int)`, will calculate the monthly loan installment and write it to the console. The parameters have restrictions:\n* the loan amount must be between 100.00 and 10,000.00,\n* the number of installments must be between 6 and 48.\n\nIf the loan amount exceeds the acceptable range, the loan amount should be set at 5,000.00. If the number of installments exceeds the acceptable range, the number of installments should be set to 36.\n\nThe calculated monthly installment should also include interest. To simplify the calculations, assume that you add X percent to the loan amount depending on the number of installments:\n* 6-12 installments - 2.5%,\n* 13-24 installments - 5.0%,\n* 25-48 installments - 10.0%,\n\nand then calculate the installment amount based on the number of installments.\n\nGet the data from the user in the console using the `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task05",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 100,
                      "length" : 31,
                      "possible_answer" : "Scanner scanner = new Scanner(System.in);\n        int number = scanner.nextInt();\n\n        for (int i = 1; i <= number; i = i + 2) {\n            System.out.println(i);\n        }",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        // Implement your solution here\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"15\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the number 15, the program should write the numbers 1, 3, 5, 7, 9, 11, 13, 15 in the console.\", \"1\\n3\\n5\\n7\\n9\\n11\\n13\\n15\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"1\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the number 1, the program should write the number 1 in the console.\", \"1\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the number 0, the program should not write anything to the console.\", \"\", outContent.toString().trim());\n    }\n}"
                }
              },
              "description_text" : "Write a program that takes a positive integer from the user - `number (int)`, and then prints all positive odd numbers not greater than the given number in the console in order, each number in new line.\n\nFor example, for the number 15, the program should write in the console the numbers: 1, 3, 5, 7, 9, 11, 13, 15 (in new line each)\n\nGet the data from the user in the console using the `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task06",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 221,
                      "length" : 31,
                      "possible_answer" : "if (b <= a) {\n            System.out.println(\"Job completed\");\n        } else {\n            int sum = 0;\n            for (int i = a; i <= b; i++) {\n                sum += i;\n            }\n            System.out.println(sum);\n        }\n",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n\n        // Implement your solution here\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"4\\n11\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For numbers a = 4 and b = 11, the program should write the number 60 in the console.\", \"60\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"9\\n64\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For numbers a = 9 and b = 64, the program should write 2044 in the console.\", \"2044\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"2\\n1\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For numbers a = 2 and b = 1, the program should write 'Job completed' in the console.\", \"Job completed\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution4() {\n        String inputText = \"2\\n2\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For numbers a = 2 and b = 2, the program should write in the console the message 'Job completed'.\", \"Job completed\", outContent.toString().trim());\n    }\n\n}"
                }
              },
              "description_text" : "Write a program that takes from the user two integers A - `a (int)` and B - `b (int)`, where `A <B`, and then calculates the sum of the sequence of numbers from A to B (A, A + 1, A + 2, ..., B) and prints it in the console. When the `A <B` condition is not met, the program exits by writing `\"Job completed\"` in the console.\n\nFor example, for A = 4 and B = 11, the program should write the number 60 in the console.\n\nGet the data from the user in the console using the `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task07",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 186,
                      "length" : 31,
                      "possible_answer" : "int currentPowerOfTwo = 1;\n        do {\n            System.out.println(currentPowerOfTwo);\n            currentPowerOfTwo *= 2;\n        } while (currentPowerOfTwo < n);",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n\n        // Implement your solution here\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"71\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the number n = 71, the program should write in the console the numbers: 1, 2, 4, 8, 16, 32, 64.\", \"1\\n2\\n4\\n8\\n16\\n32\\n64\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"1\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the number n = 1, the program should write the number 1 in the console.\", \"1\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"423\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the number n = 423, the program should write in the console the numbers: 1, 2, 4, 8, 16, 32, 64, 128, 256.\", \"1\\n2\\n4\\n8\\n16\\n32\\n64\\n128\\n256\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n}"
                }
              },
              "description_text" : "Write a program that takes a positive integer N - `n (int)` from the user, and then displays all powers of the number 2 in the console that are not greater than the number given (each number should be displayed in new line.\n\nFor example, for the number 71 the program should write in the console the numbers: 1 2 4 8 16 32 64, in new line each.\n\nGet the data from the user in the console using the `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task08",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 100,
                      "length" : 31,
                      "possible_answer" : "Scanner scanner = new Scanner(System.in);\n        int number;\n        int sum = 0;\n        do {\n            number = scanner.nextInt();\n            sum += number;\n        } while (number != 0);\n\n        System.out.println(sum);",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        // Implement your solution here\n\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"3\\n2\\n5\\n1\\n0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For a series of numbers: 3, 2, 5, 1, 0, the program should write to the console the number: 11.\", \"11\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"33\\n21\\n54\\n-74\\n0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the sequence of numbers: 33, 21, 54, -74, 0, the program should write in the console the number: 34.\", \"34\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"-33\\n-1\\n54\\n-94\\n0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the sequence of numbers: -33, -1, 54, -94, 0, the program should write to the console the number: -74.\", \"-74\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n}"
                }
              },
              "description_text" : "Write a program that takes numbers from the user as long as the number 0 is not given. When the number 0 is given, the program calculates the sum of the numbers given and prints it in the console.\n\nFor example, for a series of given numbers: 3, 2, 5, 1, 0, the program should write the number 11 in the console.\n¬†\nGet the data from the user in the console using the `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task09",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 150,
                      "length" : 31,
                      "possible_answer" : "int number;\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n\n        do {\n            number = scanner.nextInt();\n\n            if (number > max) {\n                max = number;\n            }\n\n            if (number < min) {\n                min = number;\n            }\n        } while (number != 0);\n\n        System.out.println(max + min);\n        System.out.println((max + min) / 2.0f);",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        // Implement your solution here\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"1\\n-4\\n2\\n17\\n0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the sequence of numbers: 1, -4, 2, 17, 0, the program should write in the console the numbers: 13, 6.5.\", \"13\\n6.5\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"11\\n-44\\n52\\n327\\n0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the sequence of numbers: 11, -44, 52, 327, 0, the program should write in the console the numbers: 283, 141.5.\", \"283\\n141.5\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"12\\n24\\n-24\\n0\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the sequence of numbers: 12, 24, -24, 0, the program should write in the console the numbers: 0, 0.0\", \"0\\n0.0\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n}"
                }
              },
              "description_text" : "Write a program that retrieves an integer string from the user. Downloading data ends with the number 0 (not included in the data). Then, the program calculates the sum of the largest and smallest of the given numbers and their arithmetic average and prints them in the console.\n\nFor example, for a series of given numbers: 1, -4, 2, 17, 0, the program should write in the console the numbers: 13, 6.5.\n¬†\nGet the data from the user in the console using the `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task10",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 31,
                      "possible_answer" : "int number = scanner.nextInt();\n\n        for (int i = 1; i <= number; i++) {\n            if (number % i == 0) {\n                System.out.println(i);\n            }\n        }",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Implement your solution here\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"21\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the number 21, the program should write in the console the numbers: 1, 3, 7, 21.\", \"1\\n3\\n7\\n21\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"49\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the number 49, the program should write in the console the numbers: 1, 7, 49.\", \"1\\n7\\n49\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"1024\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the number 1024, the program should write to the console the numbers: 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024.\", \"1\\n2\\n4\\n8\\n16\\n32\\n64\\n128\\n256\\n512\\n1024\", outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n}"
                }
              },
              "description_text" : "Write a program that takes an integer from the user and prints all its divisors in the console, each divisor in seperate line.\n\nFor example, for the number 21, the program should write in the console the numbers: 1, 3, 7, 21 (in new line each)\n¬†\nGet the data from the user in the console using the `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task11",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 191,
                      "length" : 31,
                      "possible_answer" : "if (number <= 1) {\n            System.out.println(\"I am interrupting work\");\n            return;\n        }\n\n        boolean isPrimeNumber = true;\n\n        for (int i = 2; i < number; i++) {\n            if (number % i == 0) {\n                isPrimeNumber = false;\n                break;\n            }\n        }\n\n        if (isPrimeNumber) {\n            System.out.println(\"Yes\");\n        } else {\n            System.out.println(\"No\");\n        }",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int number = scanner.nextInt();\n\n        // Implement your solution here\n\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"23\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the number 23, the program should write to the console the message: 'Yes'.\", \"Yes\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"2\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the number 2, the program should write to the console the message: 'Yes'.\", \"Yes\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"4\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the number 4, the program should write to the console the message: 'No'.\", \"No\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution4() {\n        String inputText = \"2000\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the number 2000, the program should write to the console the message: 'No'.\", \"No\", outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution5() {\n        String inputText = \"1\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        assertEquals(\"For the number 1, the program should write to the console the message: 'I am interrupting work'.\", \"I am interrupting work\", outContent.toString().trim());\n    }\n\n}"
                }
              },
              "description_text" : "Write a program that takes an integer greater than 1 from the user and checks if the number is a prime number. In the case when this number is a prime number, the program will write a message `\"Yes\"` in the console, otherwise it will write a message `\"No\"` in the console.\n\nIf the user gives a number less than or equal to 1, the program will write in the console the message: `\"I am interrupting work\"`\n¬†\nGet the data from the user in the console using the `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task12",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 234,
                      "length" : 31,
                      "possible_answer" : "int[] occurrences = new int[10];\n\n        for (int i = 0; i < numbers.length; i++) {\n            occurrences[numbers[i] - 1] += 1;\n        }\n\n        for (int i = 0; i < occurrences.length; i++) {\n            System.out.println(i + 1 + \" - \" + occurrences[i]);\n        }",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Arrays;\n\npublic class Task {\n    public static void main(String[] args) {\n        int[] numbers = Arrays\n                .stream(args)\n                .mapToInt(Integer::parseInt)\n                .toArray();\n\n        // Implement your solution here\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\nimport java.util.Arrays;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String[] input = new String[]{\"6\", \"5\", \"4\", \"5\", \"10\", \"5\", \"8\", \"3\", \"10\", \"6\", \"6\", \"6\", \"4\", \"3\", \"2\", \"8\", \"1\", \"3\", \"4\", \"7\"};\n\n        Task.main(input);\n\n        String expected = \"1 - 1\\n\" +\n                \"2 - 1\\n\" +\n                \"3 - 3\\n\" +\n                \"4 - 3\\n\" +\n                \"5 - 3\\n\" +\n                \"6 - 4\\n\" +\n                \"7 - 1\\n\" +\n                \"8 - 2\\n\" +\n                \"9 - 0\\n\" +\n                \"10 - 2\";\n\n        assertEquals(String.format(\"For the table %s, the program should write in the console: \\n%s.\", Arrays.toString(input), expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution2() {\n        String[] input = new String[]{\"6\"};\n\n        Task.main(input);\n\n        String expected = \"1 - 0\\n\" +\n                \"2 - 0\\n\" +\n                \"3 - 0\\n\" +\n                \"4 - 0\\n\" +\n                \"5 - 0\\n\" +\n                \"6 - 1\\n\" +\n                \"7 - 0\\n\" +\n                \"8 - 0\\n\" +\n                \"9 - 0\\n\" +\n                \"10 - 0\";\n\n        assertEquals(String.format(\"For the table %s, the program should write in the console: \\n%s.\", Arrays.toString(input), expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution3() {\n        String[] input = new String[]{\"6\", \"9\", \"2\", \"3\", \"2\", \"9\", \"10\"};\n\n        Task.main(input);\n\n        String expected = \"1 - 0\\n\" +\n                \"2 - 2\\n\" +\n                \"3 - 1\\n\" +\n                \"4 - 0\\n\" +\n                \"5 - 0\\n\" +\n                \"6 - 1\\n\" +\n                \"7 - 0\\n\" +\n                \"8 - 0\\n\" +\n                \"9 - 2\\n\" +\n                \"10 - 1\";\n\n        assertEquals(String.format(\"For the table %s, the program should write in the console: \\n%s.\", Arrays.toString(input), expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n}"
                }
              },
              "description_text" : "Write a program that counts how many times each of the numbers has appeared in the prepared table and prints a summary in the console. An array can contain ** only ** numbers from 1 to 10.\n\nFor example, for the table `[6 5 4 5 10 5 8 3 10 6 6 6 4 3 2 8 1 3 4 7]` , the program should write in the console the number of occurrences of each number:\n\n* 1 - 1\n* 2 - 1\n* 3 - 3\n* 4 - 3\n* 5 - 3\n* 6 - 4\n* 7 - 1\n* 8 - 2\n* 9 - 0\n* 10 - 2\n\nAn array containing numbers is prepared as the variable `numbers`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task13",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 31,
                      "possible_answer" : "String text = scanner.nextLine();\n\n        if (text.contains(\"Java\")) {\n            System.out.println(\"Found Java\");\n        }\n        if (text.startsWith(\"Java\")) {\n            System.out.println(\"Starts with Java\");\n        }\n        if (text.endsWith(\"Java\")) {\n            System.out.println(\"Ends with Java\");\n        }\n        if (text.equals(\"Java\")) {\n            System.out.println(\"Equals Java\");\n        }\n        System.out.println(text.indexOf(\"Java\"));",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Implement your solution here\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"Java\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"Found Java\\n\" +\n                \"Starts with Java\\n\" +\n                \"Ends with Java\\n\" +\n                \"Equals Java\\n\" +\n                \"0\";\n\n        assertEquals(String.format(\"For the text %s, the program should write in the console: \\n%s.\", inputText, expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"A java course from scratch is the best way to learn Java\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"Found Java\\n\" +\n                \"Ends with Java\\n\" +\n                \"52\";\n\n        assertEquals(String.format(\"For the text %s, the program should write in the console: \\n%s.\", inputText, expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"Only Java!\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"Found Java\\n\" +\n                \"5\";\n\n        assertEquals(String.format(\"For the text %s, the program should write in the console: \\n%s.\", inputText, expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n}"
                }
              },
              "description_text" : "Write a program that reads the text entered by the user, and then:\n\n1. checks if the word \"Java\" appears in the text - if so, it prints the message \"Found Java\" in the console,\n2. checks if the text starts with the word \"Java\" - if so, it prints the message \"Starts with Java\" in the console,\n3. check if the text ends with the word \"Java\" - if so, it prints the message \"Ends with Java\" in the console,\n4. checks if the text equals the word \"Java\" - if so, prints the message \"Equals Java\" in the console,\n5. prints the index of the first occurrence of the word \"Java\" in the text in the console.\n\nFor example, for the text `\"Java\"`, the program should write in the console:\n\n* Found Java\n* Starts with Java\n* Ends with Java\n* Equals Java\n* 0\n\nand for the text `\"A java course from scratch is the best way to learn Java\"`, the program should write in the console:\n\n* Found Java\n* Ends with Java\n* 52\n\n\nGet the data from the user in the console using the `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task14",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 31,
                      "possible_answer" : "String text = scanner.nextLine();\n\n        System.out.println(text.replaceAll(\",\", \"-MAKARENA\"));",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Implement your solution here\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"Lorem ipsum dolor sit amet-MAKARENA consectetur adipiscing elit-MAKARENA sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\";\n\n        assertEquals(String.format(\"For the text %s, the program should write to the console: %s.\", inputText, expected), expected, outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"A simple, text, really, so, simple!\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"A simple-MAKARENA text-MAKARENA really-MAKARENA so-MAKARENA simple!\";\n\n        assertEquals(String.format(\"For the text %s, the program should write to the console: %s\", inputText, expected), expected, outContent.toString().trim());\n    }\n\n}"
                }
              },
              "description_text" : "Write a program that reads the text entered by the user, and then for that text converts all comma occurrences to the text \"-MAKARENA\" and displays in the console.\n\nFor example, for the text `\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"`, The program should write in the console `\"Lorem ipsum dolor sit amet-MAKARENA consectetur adipiscing elit-MAKARENA sed to eiusmod tempor incididunt ut labore et dolore magna aliqua.\"`.\n\nGet the data from the user in the console using the `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task15",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 199,
                      "length" : 31,
                      "possible_answer" : "String text = scanner.nextLine();\n        String[] words = text.replaceAll(\"[^a-zA-Z ]\", \"\").toLowerCase().split(\"\\\\s+\");\n        Map<String, Integer> wordsOccurrences = new TreeMap<>();\n\n        for (String word : words) {\n            Integer count = wordsOccurrences.get(word);\n            if (count != null) {\n                count++;\n            } else {\n                count = 1;\n            }\n\n            wordsOccurrences.put(word, count);\n        }\n\n        wordsOccurrences.forEach((key, val) -> System.out.println(key + \" - \" + val));",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Map;\nimport java.util.Scanner;\nimport java.util.TreeMap;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Implement your solution here\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"Ala likes cats, but she is not liked by the Cats.\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"ala - 1\\n\" +\n                \"but - 1\\n\" +\n                \"by - 1\\n\" +\n                \"cats - 2\\n\" +\n                \"is - 1\\n\" +\n                \"liked - 1\\n\" +\n                \"likes - 1\\n\" +\n                \"not - 1\\n\" +\n                \"she - 1\\n\" +\n                \"the - 1\";\n\n        assertEquals(String.format(\"For the text %s, the program should write in the console: \\n%s.\", inputText, expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"Ala! likes? cats, but. she is not liked by the Cats.\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"ala - 1\\n\" +\n                \"but - 1\\n\" +\n                \"by - 1\\n\" +\n                \"cats - 2\\n\" +\n                \"is - 1\\n\" +\n                \"liked - 1\\n\" +\n                \"likes - 1\\n\" +\n                \"not - 1\\n\" +\n                \"she - 1\\n\" +\n                \"the - 1\";\n\n        assertEquals(String.format(\"For the text %s, the program should write in the console: \\n%s.\", inputText, expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"World. Hello, World!\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"hello - 1\\n\" +\n                \"world - 2\";\n\n        assertEquals(String.format(\"For the text %s, the program should write in the console: \\n%s.\", inputText, expected), expected, outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\"));\n    }\n\n}"
                }
              },
              "description_text" : "Write a program that reads the text entered by the user and then divides it into individual words. Then counts the number of occurrences of words regardless of case and writes them to the console in alphabetical order.\n\nFor example, for the text `\"Ala likes cats, but she is not liked by the Cats.\"`, the program should write in the console:\n\n* ala - 1\n* but - 1\n* by - 1\n* cats - 2\n* is - 1\n* liked - 1\n* likes - 1\n* not - 1\n* she - 1\n* the - 1\n\nAssume that any punctuation marks may appear in the text.\n\nGet the data from the user in the console using the `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task16",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 31,
                      "possible_answer" : "String text = scanner.nextLine();\n\n        String reversed = new StringBuilder(text).reverse().toString();\n\n        System.out.println(reversed);",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Implement your solution here\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"Cat\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"taC\";\n\n        assertEquals(String.format(\"For the text %s, the program should write to the console: %s.\", inputText, expected), expected, outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \".auqila angam erolod te erobal tu tnudidicni ropmet domsuie od des ,tile gnicsipida rutetcesnoc ,tema tis rolod muspi meroL\";\n\n        assertEquals(String.format(\"For the text %s, the program should write to the console: %s.\", inputText, expected), expected, outContent.toString().trim());\n    }\n\n}"
                }
              },
              "description_text" : "Write a program that receives text from the user and then creates a string that is the inverted text and displays it in the console.\n\nFor example, for the text `\"Cat\"`, the program should write the text `\"taC\"` in the console.\n\nGet the data from the user in the console using the `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task17",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 31,
                      "possible_answer" : "char[] text = scanner.nextLine().toCharArray();\n        // If the bracket is opened, increase by one, if closed, decrease by one.\n        // For ideal balancing of parentheses, the variable should be 0 at the end of the iteration of the text.\n        int parenthesesOpen = 0;\n\n        for (char c : text) {\n            switch (c) {\n                case '(':\n                    parenthesesOpen++;\n                    break;\n                case ')':\n                    parenthesesOpen--;\n                    break;\n            }\n\n            // Check every sign to see if the parenthesis has been closed without being previously opened.\n            if (parenthesesOpen < 0) {\n                break;\n            }\n        }\n\n        if (parenthesesOpen != 0) {\n            System.out.println(\"Incorrect pairing of brackets\");\n        } else {\n            System.out.println(\"OK\");\n        }",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Implement your solution here\n\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"2 * (3.4 - (-7)/2)*(a-2)/(b-1)))\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"Incorrect pairing of brackets\";\n\n        assertEquals(String.format(\"For the text %s, the program should write to the console: %s.\", inputText, expected), expected, outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"(2 * (3.4 - (-7)/2)*(a-2)/(b-1))\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"OK\";\n\n        assertEquals(String.format(\"For the text %s, the program should write to the console: %s.\", inputText, expected), expected, outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \") 2 * 4 (\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"Incorrect pairing of brackets\";\n\n        assertEquals(String.format(\"For the text %s, the program should write to the console: %s.\", inputText, expected), expected, outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution4() {\n        String inputText = \"((2 * 4)\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"Incorrect pairing of brackets\";\n\n        assertEquals(String.format(\"For the text %s, the program should write to the console: %s.\", inputText, expected), expected, outContent.toString().trim());\n    }\n\n}"
                }
              },
              "description_text" : "Write a program that checks if the brackets are correctly matched in the user-specified arithmetic expression. The expression is given as a single string.\n\nIf the brackets are correctly paired, the program should write to the console the message: `\"OK\"`. Otherwise, the program should write to the console the message: `\"Incorrect pairing of brackets\"`.\n\n* Example a: `\"2 * (3.4 - (-7) / 2) * (a-2) / (b-1)))\"`, result: `\"Incorrect pairing of brackets\"`\n¬†¬†¬†¬†¬†¬†¬†¬†\n* Example b: `\"(2 * (3.4 - (-7) / 2) * (a-2) / (b-1))\"` result: `\"OK\"`\n\n* Example c: `\") 2 * 4 (\"` result: `\"Incorrect pairing of brackets\"`\n\nGet the data from the user in the console using the `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task18",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 31,
                      "possible_answer" : "char[] text = scanner.nextLine().toCharArray();\n        int n = scanner.nextInt();\n        char[] cipheredText = new char[text.length];\n\n        for (int i = 0; i < text.length; i++) {\n            if (text[i] == ' ') {\n                cipheredText[i] = text[i];\n                continue;\n            }\n\n            int charCode = ((int) text[i] + n) - 96;\n            charCode = charCode % 26 + 96;\n\n            cipheredText[i] = (char) charCode;\n        }\n\n        System.out.println(new String(cipheredText));",
                      "placeholder_text" : "// Implement your solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Implement your solution here\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n        System.setErr(new PrintStream(errContent));\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    public void testSolution() {\n        String inputText = \"ala has a cat\\n1\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"bmb ibt b dbu\";\n\n        assertEquals(String.format(\"For the text %s and n %d, the program should write to the console: %s.\", inputText, 1, expected), expected, outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution2() {\n        String inputText = \"ala has a cat\\n26\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"ala has a cat\";\n\n        assertEquals(String.format(\"For the text %s and n %d, the program should write to the console: %s.\", inputText, 26, expected), expected, outContent.toString().trim());\n    }\n\n    @Test\n    public void testSolution3() {\n        String inputText = \"This is a sentence\\n13\";\n        System.setIn(new ByteArrayInputStream(inputText.getBytes()));\n\n        Task.main(new String[]{});\n\n        String expected = \"auvf vf n fragrapr\";\n\n        assertEquals(String.format(\"For the text %s and n %d, the program should write to the console: %s.\", inputText, 13, expected), expected, outContent.toString().trim());\n    }\n\n}"
                }
              },
              "description_text" : "Write a program that encrypts a given string using the Caesar cipher, which is a special case of a mono-alphabetic substitution cipher. The program retrieves the text to be encrypted from the user and the number n by which the alphabet is moved by which the text is encrypted, and then prints the encrypted text in the console. For simplicity, it can be assumed that the input string consists only of lowercase letters of the English alphabet, i.e. `'a' - 'z'` and spaces.\n\n* Example a: text: `\"ala has a cat\"`, n: `1`, result: `\"bmb ibt b dbu\"`\n\n* Example b: text: `\"ala has a cat\"`, n: `26`, result: `\"ala has a cat\"`\n\nGet the data from the user in the console using the `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task19",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 276,
                      "length" : 66,
                      "possible_answer" : "DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);\n        return LocalDate.parse(input, dateTimeFormatter);",
                      "placeholder_text" : "// Implement your solution here\n        return null; // replace me"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\npublic class Task {\n    public static void main(String[] args) {\n        // you can call the method here for testing\n    }\n\n    public static LocalDate toLocalDate(String pattern, String input) {\n        // Implement your solution here\n        return null; // replace me\n\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Tests {\n    @Test\n    public void testSolution() {\n        String pattern = \"dd-MM-yyyy\";\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);\n        LocalDate date = LocalDate.of(2020, 3, 5);\n\n        LocalDate result = Task.toLocalDate(pattern, date.format(dateTimeFormatter));\n\n        assertEquals(String.format(\"The method should return a valid object for the format %s and date %s.\", pattern, date.format(dateTimeFormatter)), date, result);\n    }\n\n    @Test\n    public void testSolution2() {\n        String pattern = \"MM-dd-yyyy\";\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);\n        LocalDate date = LocalDate.of(2021, 7, 5);\n\n        LocalDate result = Task.toLocalDate(pattern, date.format(dateTimeFormatter));\n\n        assertEquals(String.format(\"The method should return a valid object for the format %s and date %s.\", pattern, date.format(dateTimeFormatter)), date, result);\n    }\n\n    @Test\n    public void testSolution3() {\n        String pattern = \"yyyy-MM-dd\";\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);\n        LocalDate date = LocalDate.of(2022, 3, 7);\n\n        LocalDate result = Task.toLocalDate(pattern, date.format(dateTimeFormatter));\n\n        assertEquals(String.format(\"The method should return a valid object for the format %s and date %s.\", pattern, date.format(dateTimeFormatter)), date, result);\n    }\n\n    @Test\n    public void testSolution4() {\n        String pattern = \"yyyy::dd::MM\";\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);\n        LocalDate date = LocalDate.of(1980, 12, 9);\n\n        LocalDate result = Task.toLocalDate(pattern, date.format(dateTimeFormatter));\n\n        assertEquals(String.format(\"The method should return a valid object for the format %s and date %s.\", pattern, date.format(dateTimeFormatter)), date, result);\n    }\n}"
                }
              },
              "description_text" : "Write a method that accepts the date format and date as String parameters and returns a `LocalDate` class object.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task20",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 303,
                      "length" : 66,
                      "possible_answer" : "DateTimeFormatter dateTimeFormatterA = DateTimeFormatter.ofPattern(\"yyyy::MM::dd\");\n        DateTimeFormatter dateTimeFormatterB = DateTimeFormatter.ofPattern(\"MM--yyyy-d\");\n        LocalDate localDateA = LocalDate.parse(dateA, dateTimeFormatterA);\n        LocalDate localDateB = LocalDate.parse(dateB, dateTimeFormatterB);\n\n        Period period = Period.between(localDateA, localDateB);\n\n        return new int[]{period.getYears(), period.getMonths(), period.getDays()};",
                      "placeholder_text" : "// Implement your solution here\n        return null; // replace me"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.time.LocalDate;\nimport java.time.Period;\nimport java.time.format.DateTimeFormatter;\n\npublic class Task {\n    public static void main(String[] args) {\n        // you can call the method here for testing\n    }\n\n    public static int[] calculateDifference(String dateA, String dateB) {\n        // Implement your solution here\n        return null; // replace me\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\nimport java.util.Arrays;\n\nimport static org.junit.Assert.assertArrayEquals;\n\npublic class Tests {\n    @Test\n    public void testSolution() {\n        String dateA = \"2014::01::23\";\n        String dateB = \"03--2020-30\";\n        int[] expected = new int[]{6, 2, 7};\n\n        int[] result = Task.calculateDifference(dateA, dateB);\n\n        assertArrayEquals(String.format(\"For dates %s and %s, the method should return an array: %s.\", dateA, dateB, Arrays.toString(expected)), expected, result);\n    }\n\n    @Test\n    public void testSolution2() {\n        String dateA = \"2013::06::01\";\n        String dateB = \"06--2120-01\";\n        int[] expected = new int[]{107, 0, 0};\n\n        int[] result = Task.calculateDifference(dateA, dateB);\n\n        assertArrayEquals(String.format(\"For dates %s and %s, the method should return an array: %s.\", dateA, dateB, Arrays.toString(expected)), expected, result);\n    }\n}"
                }
              },
              "description_text" : "Write a method that takes 2 dates as String parameters in the formats `yyyy::MM::dd` and `MM-yyyy-dd`.\n\nThe method then calculates the difference between the first and second dates.\n\nThe method returns an array of numbers (int), where the index of years is below the index of 0, the difference of months is below the index of 1, and the difference of days is below the index of 2.\n\nFor example, for the dates `\"2014::01::23\"` and `\"03-2020-30\"` returns the array `[6, 2, 7]`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "title" : "Java Fundamentals - coding",
      "items" : [
        {
          "title" : "Tasks",
          "task_list" : [
            {
              "name" : "task01",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        float speed = scanner.nextFloat();\n        System.out.println(speed * 1.6);",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// type here\n    }\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTestReturningSingleFloat(\"100\", 160);\n    }\n\n    @Test\n    public void testSolution2() {\n        runTestReturningSingleFloat(\"0\", 0);\n    }\n\n    @Test\n    public void testSolution3() {\n        runTestReturningSingleFloat(\"50.83\", 81.328f);\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.Locale;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    private static Locale systemLocale;\n    private static final float FLOAT_TESTS_DELTA = 0.1f;\n\n    @BeforeClass\n    public static void beforeClass() {\n        systemLocale = Locale.getDefault();\n        Locale.setDefault(new Locale(\"en-US\"));\n    }\n\n    @AfterClass\n    public static void afterClass() {\n        Locale.setDefault(systemLocale);\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTestReturningSingleFloat(String input, float expected) {\n        float actual = runForFloat(Task::main, input);\n\n        assertEquals(expected, actual, FLOAT_TESTS_DELTA);\n    }\n\n    private float runForFloat(Consumer<String[]> method, String input) {\n        return Float.parseFloat(run(method, input));\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                }
              },
              "description_text" : "Write an application, that will calculate speed in kilometers per hour (km/h) equal to given speed in miles per hour (mph). Your application should read one variable from user (of type `float`) and calculate speed, using following formula:\n\n`speed in km/h = 1.6 * speed in mph`\n\nYou should read input from user using `Scanner` class.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task02",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        int x = scanner.nextInt();\n        System.out.println(Math.abs(100 - x) <= 10);",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// type here\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Wrong answer for following input: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"100\", \"true\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"91\", \"true\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"90\", \"true\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"110\", \"true\");\n    }\n\n    @Test\n    public void testSolution5() {\n        runTest(\"111\", \"false\");\n    }\n\n    @Test\n    public void testSolution6() {\n        runTest(\"109\", \"true\");\n    }\n}"
                }
              },
              "description_text" : "Write an application, that will read one number from user (of type `int`) and check, if given number is \"near\" `100`. A number is \"near\" `100` when difference between it and `100` is no bigger than `10`.\n\nYour application should read one number (`int`) and print `false` or `true` on the screen, according to instructions above.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task03",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n\n        // Working, yet not sophisticated solution is to use conditional expression\n        if ((a > 0 && b < 0) || (a < 0 && b > 0)) {\n            System.out.println(true);\n        } else {\n            System.out.println(false);\n        }\n\n        // Equivalent code may also be written in following way:\n        boolean result = (a > 0 && b < 0) || (a < 0 && b > 0);\n        //System.out.println(result);\n        // expression placed inside 'if' statement\n        // is calculated as 'boolean' value,\n        // which - in this case - we may simply print.\n\n        // Alternatively, we can make use of maths:\n        // If numbers should have different signs, then one of them should be positive, the other - negative.\n        // Result of multiplication of positive and negative numbers is always negative. If the result\n        // is positive, that means that either both numbers are positive, or both are negative.\n        // If the result equals 0, it means that at least one number equals 0.\n        //System.out.println((long)a * b < 0);\n\n        // Please keep in mind that any of number must be cast to 'long' first - multiplication of very big int values\n        // may overflow the maximum range of int and return wrong results.",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// type here\n    }\n}\n"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Wrong answer for following input: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"-1\\n1\", \"false\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"0\\n1\", \"false\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"1\\n0\", \"false\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"1\\n1\", \"true\");\n    }\n\n    @Test\n    public void testSolution5() {\n        runTest(\"-1\\n-1\", \"true\");\n    }\n}"
                }
              },
              "description_text" : "Write an application, that will read two numbers from user (of type `int`) and will print `true`, if both numbers are **the same sign** (both are positive, or both are negative), or `false` otherwise. If at least one of given numbers is equl to 0, your application should print `false`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task04",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        int amoutOfJam = scanner.nextInt();\n\n        // Let's calculate how many big jars we need - if it is possible, we prefer to buy only big jars.\n        // Division / of integer values in Java \"cuts\" non-integer part of result.\n        // For example:\n        // 10 / 7 = 1\n        // 5 / 7 = 0\n        // 21 / 7 = 3\n        int amountOf7kgJars = amoutOfJam / 7;\n\n        // To know how many jam is missing, we need a remainder of division above.\n        // Remainder may be calculated using modulo (%) operator.\n        // For example:\n        // 10 % 7 = 3\n        // 5 % 7 = 5\n        // 21 % 7 = 0\n        int amountOf1kgJars = amoutOfJam % 7;\n\n        // Now we have to check if overall amount of jars is less or equal to 6.\n        // We'll print \"true\" if it is <= 6 or \"false\" otherwise.\n        System.out.println(amountOf1kgJars + amountOf7kgJars <= 6);",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// type here\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Wrong answer for following input: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"6\", \"true\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"7\", \"true\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"13\", \"false\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"14\", \"true\");\n    }\n\n    @Test\n    public void testSolution5() {\n        runTest(\"20\", \"false\");\n    }\n\n    @Test\n    public void testSolution6() {\n        runTest(\"43\", \"false\");\n    }\n}"
                }
              },
              "description_text" : "Alex is an owner of grocery store. Among many products he sells, he's mostly famous for his hand-made jam, that is being sold\nin jars of 1kg or 7kg. Alex sells only full jars (i.e. it's only possible to buy the whole jar of 1kg, or 7kg).\n\nWill is asked by his wife Jane to buy some amount of Alex's jam. Will forgot to take his bag, thus he can take home no more than six jars of jam (three jars in each of his two hands). Jane is very serious about the shopping list - if she asked for specific amount of jam, she expects exactly this amount, no more, no less.\n\nWrite an application that will check **if Will is able to take home the amount of jam specified by Jane**. Amount of jam should be read from user (positive `int` value). You can assume that there's always enough jam in Alex's shop. Your application\nshould print `true` or `false`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task05",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        float f = scanner.nextFloat();\n\n        System.out.println(Math.floor(f));\n        System.out.println(Math.round(f));\n        System.out.println(Math.ceil(f));",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// type here\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.function.Consumer;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    private static Locale systemLocale;\n    private static final float FLOAT_TESTS_DELTA = 0.1f;\n\n    @BeforeClass\n    public static void beforeClass() {\n        systemLocale = Locale.getDefault();\n        Locale.setDefault(new Locale(\"en-US\"));\n    }\n\n    @AfterClass\n    public static void afterClass() {\n        Locale.setDefault(systemLocale);\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTestForFloats(String input, float... expected) {\n        List<Float> actual = runForFloats(Task::main, input);\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], actual.get(i), FLOAT_TESTS_DELTA);\n        }\n    }\n\n    private List<Float> runForFloats(Consumer<String[]> method, String input) {\n        String output = run(method, input);\n        return Arrays\n                .stream(output.split(\"\\n\"))\n                .map(s -> s.split(\" \"))\n                .flatMap(Stream::of)\n                .map(f -> Float.parseFloat(f))\n                .collect(Collectors.toList());\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTestForFloats(\"1.4\", 1, 1, 2);\n    }\n\n    @Test\n    public void testSolution2() {\n        runTestForFloats(\"1.5\", 1, 2, 2);\n    }\n\n    @Test\n    public void testSolution3() {\n        runTestForFloats(\"1.6\", 1, 2, 2);\n    }\n}"
                }
              },
              "description_text" : "Write an application, that will read one floating-point number (of type `float`) and will print:\n* it's value rounded down to closest integer,\n* it's value rounded according to rules of math,\n* it's value rounded up to closest integer.\n\n<div class=\"hint\">\n\nUse `Math` library and it's method: `round()`, `ceil()`, `floor()`.\n</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task06",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 73,
                      "length" : 12,
                      "possible_answer" : "// you cold also make a regular 'for' loop with classic \"int i = 0\" index.\n        // According to ASCII table, consecutive letters of the alphabet are just next to each other,\n        // starting with 'A' with value of 65 till 'Z' with value of 90.\n        // This is a real number being held in variable 'i'. You could check it using debugger.\n        for (char i = 'A'; i <= 'Z'; i++) {\n            System.out.println(i);\n        }",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "public class Task {\n    public static void main(String[] args) {\n        // type here\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Wrong answer for following input: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\");\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"\", \"A\\nB\\nC\\nD\\nE\\nF\\nG\\nH\\nI\\nJ\\nK\\nL\\nM\\nN\\nO\\nP\\nQ\\nR\\nS\\nT\\nU\\nV\\nW\\nX\\nY\\nZ\");\n    }\n\n}"
                }
              },
              "description_text" : "Write an application, that will print the full latin alphabet (upper case letters) in alphabetical order. \nEach letter should be printed in new line.\n\n<div class=\"hint\">\n\nUse `for` loop and use variable of type `char`as it's iterator (from `A` to `Z`).\n</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task07",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 12,
                      "possible_answer" : "int x = scanner.nextInt();\n        int y = scanner.nextInt();\n\n        // if any of requirements is not met - exit application\n        if (x > y || x < 0 || y > 10_000) {\n            return;\n        }\n\n        int firstNumberDivisibleBySeven;     // the smallest number bigger or equal x and divisible by 7\n        if (x % 7 == 0) {\n            // number is divisible by 7, so we can start with it\n            firstNumberDivisibleBySeven = x;\n        } else {\n            // we have to calculate a little bigger number than x\n            // so we add a little to 'x' just to make it divisible by 7\n            firstNumberDivisibleBySeven = x + (7 - x % 7);\n        }\n\n        // let's start with the number we found and increase it by 7 in every loop\n        for (int i = firstNumberDivisibleBySeven; i <= y; i += 7) {\n            System.out.println(i);\n        }\n\n        ////////////////////////////////////////////////\n        // Alternatively, another solution is:\n        if (x > y || x < 0 || y > 10_000) {\n            return;\n        }\n        for (int i = x; i <= y; i++) {\n            if (i % 7 == 0) {\n//                System.out.println(i);\n            }\n        }\n        // It is worse solution without any doubts, because it's more computationally expensive.\n        // We make around y-x loops and check condition (if) in each of them.\n        // In first solution, there's 7 times less loops (because i+=7 instead of i++) and no condition to check.",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // type here\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Wrong answer for following input: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\");\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"-1\\n120\", \"\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"0\\n10001\", \"\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"14\\n21\", \"14\\n21\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"14\\n14\", \"14\");\n    }\n\n    @Test\n    public void testSolution5() {\n        runTest(\"13\\n34\", \"14\\n21\\n28\");\n    }\n\n    @Test\n    public void testSolution6() {\n        runTest(\"14\\n36\", \"14\\n21\\n28\\n35\");\n    }\n\n    @Test\n    public void testSolution7() {\n        runTest(\"32\\n33\", \"\");\n    }\n}"
                }
              },
              "description_text" : "Write an application, that:\n1) will read start number `x` (type `int`)\n2) will read end number `y` (type `int`)\n3) will check if start number is no bigger than end number and if both numbers are in range from `0` \n(included) to `10 000` (included). If not, your application will quit, without printing anything.\n4) will write all integers divisible by `7` in given range (from `x` (included) to `y` (included)).",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task08",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 12,
                      "possible_answer" : "int x = scanner.nextInt();\n\n        if (x >= 0) {\n            for (int i = x; i >= 0; i--) {\n                System.out.print(i + \" \");\n            }\n        } else {\n            for (int i = x; i <= 0; i++) {\n                System.out.print(i + \" \");\n            }\n        }",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // type here\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Wrong answer for following input: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"-6\", \"-6 -5 -4 -3 -2 -1 0\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"3\", \"3 2 1 0\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"0\", \"0\");\n    }\n}"
                }
              },
              "description_text" : "Write an application, that will read a number (of type `int`) and will write in one line all numbers starting from given number to 0 (included). Keep in mind that given number may be equal to 0 or be negative.\n\nExamples:\n* for given number: `5`, application should write: `5 4 3 2 1 0`\n* for given number: `0`, application should write: `0`\n* for given number: `-4`, application should write: `-4 -3 -2 -1 0`",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task09",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 12,
                      "possible_answer" : "int n = scanner.nextInt();\n\n        for (int i = 0; i < n; i++) {\n            // centering the tree for line 'i'\n            for (int j = 0; j < n - i - 1; j++) {\n                System.out.print(\" \");\n            }\n\n            // printing the tree for line 'i'\n            for (int j = 0; j < 2 * i + 1; j++) {\n                System.out.print(\"*\");\n            }\n\n            // printing new line\n            System.out.println();\n        }\n\n        // tree's rack\n        for (int j = 0; j < n - 1; j++) {\n            System.out.print(\" \");\n        }\n        System.out.println(\"#\");",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // type here\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Wrong answer for following input: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString()\n                .replaceAll(\"\\\\s+$\", \"\")            // drop trailing (trim, but only from end)\n                .replaceAll(\"\\r\\n\", \"\\n\");\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"1\", \"*\\n#\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"3\", \"  *\\n ***\\n*****\\n  #\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"4\", \"   *\\n  ***\\n *****\\n*******\\n   #\");\n    }\n\n}"
                }
              },
              "description_text" : "Write an application, that will draw Christmas tree according to examples below. The height of the tree should be read from user (positive integer). \n\nExamples: \n\nTree with height=3:\n```  \n  *\n ***\n*****\n  #\n```\n\nTree with height=4:\n```\n   *\n  ***\n *****\n*******\n   #\n```\n\nYour code should print a tree for any proper height given. Your application should generate the tree using single characters - it must not return tree copy-pasted by you!\n\n<div class=\"hint\">\nTo center the tree you can put spaces on the left side of the tree.\n</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task10",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        String text = scanner.nextLine();\n        text = text.replaceAll(\" \", \"\");    // removes spaces\n        text = text.toLowerCase();     // palindromes are case insensitive\n\n        boolean palindrome = true;\n        for (int i = 0; i < text.length() / 2; i++) {\n            if (text.charAt(i) != text.charAt(text.length() - 1 - i)) {\n                palindrome = false;\n                break;\n            }\n        }\n        System.out.println(palindrome);\n\n        // Alternative for iteration sign-by-sign is to reverse text String\n        String textReverse = new StringBuilder(text).reverse().toString();\n        //System.out.println(text.equals(textReverse));\n",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// type here\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Wrong answer for following input: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"kayak\", \"true\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"Ka yak\", \"true\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"abccba\", \"true\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"ab bc\", \"false\");\n    }\n\n    @Test\n    public void testSolution5() {\n        runTest(\"ab ca\", \"false\");\n    }\n\n}"
                }
              },
              "description_text" : "Write an application that will read text (type `String`) and check if given text is a palindrome. Your application should print `true` or `false`.\n\nPalindrome is a text, that reads the same backwards as forwards. It is case-insensitive (doesn't matter if letter is lowercase or uppercase) and ignores spaces.\n\nExample of palindrome: `Never odd or even`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task11",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        String text = scanner.nextLine();\n        if (text.length() <= 3) {\n            System.out.println(text.toUpperCase());\n        } else {\n            String lastThreeCharacters = text.substring(text.length() - 3);\n            String restOfText = text.substring(0, text.length() - 3);\n            String newText = restOfText + lastThreeCharacters.toUpperCase();\n            System.out.println(newText);\n        }",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// type here\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Wrong answer for following input: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"abc\", \"ABC\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"abcd\", \"aBCD\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"ok\", \"OK\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"Lorem ipsum\", \"Lorem ipSUM\");\n    }\n\n    @Test\n    public void testSolution5() {\n        runTest(\"Lorem ipsum???\", \"Lorem ipsum???\");\n    }\n\n}"
                }
              },
              "description_text" : "Write an application, that will read text (type `String`) and will upper-case letters in last three characters of text. If text is shorter than three characters, your application should upper-case all letters.\n\nExamples:\n* `Lorem ipsum` -> `Lorem ipSUM`\n* `Lorem ipsum:)` -> `Lorem ipsuM:)`\n* `ok` -> `OK`",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task12",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        String text = scanner.nextLine();\n\n        String bleepText = \"[bleep]\";\n        text = text\n                .replaceAll(\"cheese and rice\", bleepText)\n                .replaceAll(\"chuck it\", bleepText)\n                .replaceAll(\"motherpuffin\", bleepText);\n\n        System.out.println(text);",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// type here\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Wrong answer for following input: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"It ain't compiling, cheese and rice!\", \"It ain't compiling, [bleep]!\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"There is no swear word in this test\", \"There is no swear word in this test\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"chuck it chuck it\", \"[bleep] [bleep]\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"motherpuffin chuck it cheese and rice\", \"[bleep] [bleep] [bleep]\");\n    }\n\n}"
                }
              },
              "description_text" : "Write an application that will read text and \"bleep\" swear words. Found swear words should be replaced \nwith `[bleep]`. You can assume that swear words will be all lower case.\n\nSwear words are: `cheese and rice`, `chuck it`, `motherpuffin`.\n\n---\n\nFor example, text:\n`It's not compiling again, cheese and rice!`\n\nShould be replaced with:\n`It's not compiling again, [bleep]!`",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task13",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        int arr[][] = new int[2][5];\n\n        // read numbers given by user to two-dimensional array\n        for (int i = 0; i < 2; i++) {\n            for (int j = 0; j < 5; j++) {\n                arr[i][j] = scanner.nextInt();\n            }\n        }\n\n        // numbers in array arr[0] is first five-element set\n        // numbers in array arr[1] is second five-element set\n        for (int i = 0; i < 5; i++) {\n            int numberToFind = arr[0][i];\n            for (int j = 0; j < 5; j++) {\n                if (arr[1][j] == numberToFind) {\n                    System.out.println(numberToFind);\n                    break; // as we already found it, there's no reason to go on with this loop\n                }\n            }\n        }",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// type here\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Wrong answer for following input: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\");\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\n\npublic class Tests extends BaseTest {\n\n    private String printAsString(int... ints) {\n        return Arrays.stream(ints)\n                .mapToObj(String::valueOf)\n                .collect(Collectors.joining(\"\\n\"));\n    }\n\n    @Test\n    public void testSolution() {\n        runTest(printAsString(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), \"\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(printAsString(1, 2, 3, 4, 5, 1, 2, 3, 4, 5), \"1\\n2\\n3\\n4\\n5\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(printAsString(1, 2, 3, 4, 5, 5, 4, 3, 2, 1), \"1\\n2\\n3\\n4\\n5\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(printAsString(1, 2, 3, 4, 5, 8, 11, 2, 5, 9), \"2\\n5\");\n    }\n\n}"
                }
              },
              "description_text" : "Write an application, that will read two times five numbers (ten variables of type `int`) and print only those,\nwhich occured both in first and second five-element set of input.\nFor simplicity, you can assume that numbers will not repeat within one five-element set.\n\n<div class=\"hint\">\nYou can use arrays, one- or two-dimensional.\n</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task14",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n\n        while (b != 0) {\n            int c = a % b;\n            a = b;\n            b = c;\n        }\n\n        System.out.println(a);",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// type here\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Wrong answer for following input: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"21\\n24\", \"3\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"16\\n25\", \"1\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"1\\n100\", \"1\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"17\\n17\", \"17\");\n    }\n\n}"
                }
              },
              "description_text" : "Write an application, that will read two positive integers and will write their **greatest common divisor** (GCD) using\nEuclid's algorithm with modulo variation.\nGreatest common divisor (GCD) or two numbers is the biggest natural number, that both numbers are divisible by.\n \n For example, **GCD of `6` and `16` equals `2`**, because it's the smallest number that both `6` is divisile by (giving\n result `3`) and `16` is divisible by (giving result `8`). \n \n Euclid's algorithm for numbers `a` and `b`, using temporary variable `c`, goes as follows:\n```\n1. As long as b!=0 do steps 2..5; otherwise go to step 6.\n2.      c = remainder after division a by b\n3.      let 'a' equal 'b'\n4.      let 'b' equal 'c'\n5.      go to step 1.\n6. The answer is number 'a'\n```",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task15",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n\n        int bigger, smaller;\n        if (a > b) {\n            bigger = a;\n            smaller = b;\n        } else {\n            bigger = b;\n            smaller = a;\n        }\n\n        while (bigger >= smaller) {\n            bigger -= smaller;\n        }\n\n        System.out.println(bigger);",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// type here\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Wrong answer for following input: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"24\\n7\", \"3\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"7\\n24\", \"3\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"3\\n9\", \"0\");\n    }\n\n    @Test\n    public void testSolution4() {\n        runTest(\"9\\n3\", \"0\");\n    }\n\n    @Test\n    public void testSolution6() {\n        runTest(\"20\\n20\", \"0\");\n    }\n}"
                }
              },
              "description_text" : "Write an application, that will read two positive numbers (type `int`) and will return a remainder after division\nof the bigger number by smaller number. \n\n**Warning!** To make it harder, **your application MUST NOT use neither modulo operation (`%`) nor division (`/`)**.\n\n<div class=\"hint\">\nYou can calculate remainder by substracting smaller number from bigger number until the next subtraction\nwould give negative result. \n\nFor example, to find a remainder after division of 24 by 7, you should subtract 7 from 24 three times\n (24 % 7 = 24 - 3*7 = 24 - 21 = 3)\n </div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task16",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 143,
                      "length" : 12,
                      "possible_answer" : "        int n = scanner.nextInt();\n\n        // we have to use type long to store factorial\n        // because int is too small for n bigger or equal to 13!\n        long factorial = n;\n        while (--n > 0) {\n            factorial *= n;\n        }\n\n        System.out.println(factorial);",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n// type here\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Wrong answer for following input: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"1\", \"1\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"5\", \"120\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"9\", \"362880\");\n    }\n\n}"
                }
              },
              "description_text" : "Write an application, that will read a positive integer and will print it's factorial.\n\nFactorial of `n` equals: `n! = 1 * 2 * ... * n`\n\nExamples:\n* `5! = 1 * 2 * 3 * 4 * 5 = 120`\n* `3! = 1 * 2 * 3 = 6`",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task17",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 307,
                      "length" : 12,
                      "possible_answer" : "    private static float calculateAverage(int... args) {\n        int sum = 0;\n        for (int i : args) {\n            sum += i;\n        }\n\n        // Remember to cast result to floa to make divison with floating-point number.\n        // Without that, result would be \"cut down\" to integer value.\n        return (float) sum / args.length;\n    }",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "public class Task {\n\n    public static void main(String[] args) {\n        System.out.println(calculateAverage(1, 4, 2, 5, 6, 8, 11));\n        System.out.println(calculateAverage(1, 5, -11, 192));\n        System.out.println(calculateAverage(1));\n        System.out.println(calculateAverage(1, 1, 1));\n    }\n\n// type here\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.function.Consumer;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    private static Locale systemLocale;\n    private static final float FLOAT_TESTS_DELTA = 0.1f;\n\n    @BeforeClass\n    public static void beforeClass() {\n        systemLocale = Locale.getDefault();\n        Locale.setDefault(new Locale(\"en-US\"));\n    }\n\n    @AfterClass\n    public static void afterClass() {\n        Locale.setDefault(systemLocale);\n    }\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTestForFloats(String input, float... expected) {\n        List<Float> actual = runForFloats(Task::main, input);\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], actual.get(i), FLOAT_TESTS_DELTA);\n        }\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n\n    private List<Float> runForFloats(Consumer<String[]> method, String input) {\n        String output = run(method, input);\n        return Arrays\n                .stream(output.split(\"\\n\"))\n                .map(s -> s.split(\" \"))\n                .flatMap(Stream::of)\n                .map(f -> Float.parseFloat(f))\n                .collect(Collectors.toList());\n    }\n\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTestForFloats(\"\", 5.285714f, 46.75f, 1.0f, 1.0f);\n    }\n\n}"
                }
              },
              "description_text" : "Write a method that will take a variable number of arguments (all are `int`s) and return their average value (`float`).\n**Do not modify `main` method** - you should only write method `calculateAverage`.\n\n<div class=\"hint\">\n\nUse `int... args` to take a variable number of arguments in method.\n</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task18",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 12,
                      "possible_answer" : "String dateText = scanner.nextLine();\n        java.time.LocalDate date = java.time.LocalDate.parse(dateText);\n\n        java.time.LocalDate nextFriday = date;\n        while (nextFriday.getDayOfWeek() != java.time.DayOfWeek.FRIDAY) {\n            nextFriday = nextFriday.plusDays(1);\n        }\n\n        System.out.println(nextFriday);\n\n        // Alternatively, Date Time API documentation states, that same thing can be done in following way:\n        nextFriday = date.with(java.time.temporal.TemporalAdjusters.next(java.time.DayOfWeek.FRIDAY));\n        // however this is advanced topic, out of scope for current block",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // type here\n    }\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Wrong answer for following input: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"2020-05-02\", \"2020-05-08\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"2020-05-22\", \"2020-05-22\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"2020-12-31\", \"2021-01-01\");\n    }\n\n}"
                }
              },
              "description_text" : "Write an application, that will read a date in standard format of `yyyy-MM-dd` and will print the date of next Friday in\nthe same format.\n\n<div class=\"hint\">\nTo read date using scanner, you can read `String` first, and then parse it to `LocalDate` using `LocalDate.parse(...)`\n</div>\n<div class=\"hint\">\nTo find next Friday, add one day to date until you get Friday\n</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task19",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "public class Task {\n    public static void main(String[] args) {\n        Dog fido = new Dog();\n        fido.setName(\"Fido\");\n        fido.wagTail();\n\n        Dog sparky = new Dog(\"Sparky\");\n        sparky.wagTail();\n    }\n}"
                },
                "src/Dog.java" : {
                  "name" : "src/Dog.java",
                  "placeholders" : [
                    {
                      "offset" : 23,
                      "length" : 12,
                      "possible_answer" : "private String name;\n\n    public Dog() {\n    }\n\n    public Dog(String name) {\n        this.name = name;\n    }\n\n    public void wagTail() {\n        System.out.println(name + \" wags tail.\");\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "public class Dog {\n    // type here\n}\n"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"\", \"Fido wags tail.\\nSparky wags tail.\");\n    }\n\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Wrong answer for following input: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim().replaceAll(\"\\r\\n\", \"\\n\");\n    }\n}\n"
                }
              },
              "description_text" : "Finish given application. Your application:\n1) should compile without errors,\n2) should write following text:\n    ```\n    Fido wags tail.\n    Sparky wags tail.\n    ```\n\n**Do not modify neither `main` method nor `Task` class. Your changes should only be applied in `Dog` class.**",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "name" : "task20",
              "files" : {
                "src/Task.java" : {
                  "name" : "src/Task.java",
                  "placeholders" : [
                    {
                      "offset" : 47,
                      "length" : 12,
                      "possible_answer" : "    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        String line = scanner.nextLine();\n        System.out.println(line.replaceAll(\"^http://\", \"https://\"));\n    }",
                      "placeholder_text" : "// type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "import java.util.Scanner;\n\npublic class Task {\n// type here\n}"
                },
                "test/Tests.java" : {
                  "name" : "test/Tests.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.Test;\n\npublic class Tests extends BaseTest {\n\n    @Test\n    public void testSolution() {\n        runTest(\"http://sdacademy.dev/\", \"https://sdacademy.dev/\");\n    }\n\n    @Test\n    public void testSolution2() {\n        runTest(\"https://sdacademy.dev/\", \"https://sdacademy.dev/\");\n    }\n\n    @Test\n    public void testSolution3() {\n        runTest(\"http://http://sdacademy.dev/\", \"https://http://sdacademy.dev/\");\n    }\n\n}"
                },
                "test/BaseTest.java" : {
                  "name" : "test/BaseTest.java",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "import org.junit.After;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.function.Consumer;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class BaseTest {\n\n    @After\n    public void restoreStreams() {\n        System.setOut(System.out);\n        System.setIn(System.in);\n    }\n\n    protected void runTest(String input, String expected) {\n        String actual = run(Task::main, input);\n\n        assertEquals(\"Wrong answer for following input: \\n\" + input + \"\\n\", expected, actual);\n    }\n\n    private String run(Consumer<String[]> method, String input) {\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        method.accept(new String[]{});\n        return outContent.toString().trim();\n    }\n}\n"
                }
              },
              "description_text" : "Write an application, that will read text (type `String`, representing web address) and change prefix from\n`http://` to `https://`, but only if it's at the beginning of the text.\n\n<div class=\"hint\">\n\nUse regular expression. The special character of start of text is `^`.\n</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    }
  ],
  "additional_files" : [
    {
      "name" : "build.gradle",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "buildscript {\n    repositories {\n        mavenCentral()\n    }\n}\n\ndef printOutput(def output) {\n    return tasks.create(\"printOutput\") {\n        for (line in output.toString().readLines()) {\n            println \"#educational_plugin\" + line\n        }\n    }\n}\n\nsubprojects {\n    apply plugin: 'application'\n    apply plugin: 'java'\n\n    sourceCompatibility = 1.8\n\n    repositories {\n        mavenCentral()\n    }\n\n    dependencies {\n        testCompile group: 'junit', name: 'junit', version: '4.12'\n    }\n\n    sourceSets {\n        main {\n            java.srcDir 'src'\n        }\n        test {\n            java.srcDir 'test'\n        }\n    }\n\n    mainClassName = project.hasProperty(\"mainClass\") ? project.getProperty(\"mainClass\") : \"\"\n\n    def runOutput = new ByteArrayOutputStream()\n    tasks.run.setStandardOutput(runOutput)\n    tasks.run.doLast { printOutput(runOutput) }\n}\n\nproject(':util') {\n    dependencies {\n        compile group: 'junit', name: 'junit', version: '4.12'\n    }\n}\n\nconfigure(subprojects.findAll {it.name != 'util'}) {\n  dependencies {\n    compile project(':util').sourceSets.main.output\n    testCompile project(':util').sourceSets.test.output\n  }\n}\n"
    }
  ],
  "version" : 11
}